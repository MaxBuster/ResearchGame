package client;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.ScrollPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeSupport;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import net.miginfocom.swing.MigLayout;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JTable;
import javax.swing.UIManager;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

public class ClientJFrame extends JFrame {
	private PropertyChangeSupport PCS;
	private JPanel contentPane;
	private char party = 'X';
	private int budget = 2000;
	private JLabel lblBudget;
	private Object[][] data;
	private JTextPane genericTextPane;

	private JScrollPane scrollPane1;
	private JTable table1;
	private Object[][] table1Data;
	private String[] table1Names;

	private JScrollPane scrollPane2;
	private JTable table2;
	private Object[][] table2Data;
	private String[] table2Names;

	private int[] candNums;
	private char[] candParties;
	private String[] candInfo;
	private int[] candVotes;
	private int[] candVotes1;

	/**
	 * Create the frame.
	 */
	public ClientJFrame(PropertyChangeSupport PCS) {
		this.PCS = PCS;
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 600, 600);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new MigLayout(
			"",
			"[grow,right][50px,grow,fill][50px,grow,fill][50px,grow,fill][50px,grow,fill][grow,left]",
			"[grow,top][fill][fill][100px,grow,fill][100px,grow,fill][grow,fill][grow][][grow,bottom]"));
		genericTextPane = new JTextPane();
		contentPane.add(genericTextPane, "cell 1 2 4 1,grow");
		String startingMessage = "Please wait for the game to begin";
		genericTextPane.setText(startingMessage);

		table1 = new JTable();
		table2 = new JTable();
	}
	
	/**
	 * Have:
	 * arrays with data for each candidate
	 * addLabels
	 * addChart
	 * setText
	 * addEndRound
	 * addInfo
	 * addTable2ForVote
	 * addTable2ForBuy
	 * addTable1ForBuy1
	 * addTable1ForBuy2
	 * addTable1ForStraw
	 * addTable1ForVote1
	 * addTable1ForVote2
	 */

	public void addLabels(int playerNum, char party, int idealPt, int budget) {
		JLabel lblPlayerNumber = new JLabel("Player Number: " + playerNum);
		contentPane.add(lblPlayerNumber, "cell 1 1");

		JLabel lblParty = new JLabel("Party: " + party);
		contentPane.add(lblParty, "cell 2 1");
		this.party = party;

		JLabel lblIdealPoint = new JLabel("Ideal Point: " + idealPt);
		contentPane.add(lblIdealPoint, "cell 3 1");

		lblBudget = new JLabel("Budget: " + this.budget);
		contentPane.add(lblBudget, "cell 4 1");
		this.budget = budget;
	}

	public void setTextPane(String text) {
		genericTextPane.setText(text);
		genericTextPane.revalidate();
		genericTextPane.repaint();
	}

	public void addChart(int[] data) {
		MakeChart chart = new MakeChart("Distribution of Voters", data);
		JFreeChart graph = chart.getChart();
		ChartPanel pane = new ChartPanel(graph);
		contentPane.add(pane, "cell 1 5 4 1,grow");
	}

	public void startFirstBuyRound(int[] candNums, char[] parties) {
		initializeCandArrays(candNums, parties);
//		addTable1Buy1();
		String[] table1Names = {"Candidate #", "Party", "Info"};
		Object[][] table1Data = { {1,"R","-------"}, {2,"R","-------"}, {3,"R","-------"}, {4,"R","-------"} };
//		setScrollPane1(table1Names, table1Data);
//		addTable2Buy(candNums, 1);

		String[] table2Names = {"Candidate #", "Price", "Buy"};
		Object[][] table2Data = { {1,"100","Buy"}, {2,"100","Buy"}, {3,"100","Buy"}, {4,"100","Buy"} };
		contentPane.revalidate();
		contentPane.repaint();
	}
	
	public void setScrollPane1(String[] columnNames, Object[][] data) {
		DefaultTableModel table1Model = new DefaultTableModel(data, columnNames);
		table1 = new JTable(table1Model);
		Dimension d = new Dimension(5, 5);
		table1.setPreferredScrollableViewportSize(d);
		scrollPane1 = new JScrollPane(table1);
		contentPane.add(scrollPane1, "cell 1 3 4 1,grow");
	}
	
	public void setScrollPane2(String[] columnNames, Object[][] data, String buttonColumn) {
		DefaultTableModel table2Model = new DefaultTableModel(data, columnNames);
		table2 = new JTable(table2Model);
		
		table2.getColumn(buttonColumn).setCellRenderer(new ButtonRenderer());
		table2.getColumn(buttonColumn).setCellEditor(new ButtonEditor(new JCheckBox()));
		
		Dimension d = new Dimension(5, 5);
		table2.setPreferredScrollableViewportSize(d);
		scrollPane2 = new JScrollPane(table2);
		contentPane.add(scrollPane2, "cell 1 4 4 1,grow");
	}

	public void initializeCandArrays(int[] candNums, char[] parties) {
		this.candNums = new int[candNums.length];
		this.candParties = new char[candNums.length];
		this.candInfo = new String[candNums.length];
		this.candVotes = new int[candNums.length]; // FIXME are these necessary?
		this.candVotes1 = new int[candNums.length];

		for (int i = 0; i < candNums.length; i++) {
			this.candNums[i] = candNums[i];
			this.candParties[i] = parties[i];
			this.candInfo[i] = "-----";
			this.candVotes[i] = 0; // FIXME are these necessary?
		}
	}

	public void addTable1Buy1() {
		table1Names = new String[] { "Cand Num", "Party", "Info" };
		table1Data = new Object[candNums.length][3];
		for (int i = 0; i < candNums.length; i++) {
			table1Data[i][0] = candNums[i];
			table1Data[i][1] = candParties[i];
			table1Data[i][2] = "-----";
		}

		DefaultTableModel table1Model = new DefaultTableModel(table1Data,
				table1Names);
		table1 = new JTable(table1Model);
		Dimension d = new Dimension(5, 5);
		table1.setPreferredScrollableViewportSize(d);
		scrollPane1 = new JScrollPane(table1);
		contentPane.add(scrollPane1, "cell 1 3 4 1,grow");
	}

	public void addTable1() {
		DefaultTableModel table1Model = new DefaultTableModel(table1Data,
				table1Names);
		table1 = new JTable(table1Model);
		Dimension d = new Dimension(5, 5);
		table1.setPreferredScrollableViewportSize(d);
		scrollPane1 = new JScrollPane(table1);
		contentPane.add(scrollPane1, "cell 1 3 4 1,grow");
	}

	public void addTable2(String btnType) {
		DefaultTableModel table2Model = new DefaultTableModel(table2Data,
				table2Names);
		table2 = new JTable(table2Model);
		Dimension d = new Dimension(5, 5);
		table2.setPreferredScrollableViewportSize(d);
		// FIXME Set column to button by btnType
		scrollPane2 = new JScrollPane(table2);
		contentPane.add(scrollPane2, "cell 1 4 4 1,grow");
	}

	public void addEndRoundBtn(final int roundNum) {
		final JButton btnEndRound = new JButton("End Round");
		btnEndRound.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				btnEndRound.setVisible(false);
				if (roundNum == 1) {
					contentPane.remove(scrollPane1);
				}
				contentPane.remove(scrollPane2);
				PCS.firePropertyChange("End Round", roundNum, null); // Sends
																		// which
																		// buy
																		// round
																		// ended
			}
		});
		contentPane.add(btnEndRound, "cell 4 6");
	}

	public void addTable2Buy(int[] candNums, int roundNum) {
		addEndRoundBtn(roundNum);
		setTable2BuyData(candNums);
		String[] table2Names = { "CandNum", "Party", "Price", "Buy" };
		setScrollPane2Buy(table2Names);
		contentPane.add(scrollPane2, "cell 1 4 4 1,grow");
		contentPane.revalidate();
		contentPane.repaint();
	}

	public void setTable2BuyData(int[] candNums) {
		table2Data = new Object[candNums.length][4];
		for (int i = 0; i < candNums.length; i++) {
			int candNum = candNums[i];
			table2Data[i][0] = candNum;
			table2Data[i][1] = this.candParties[candNum - 1];
			if (party == this.candParties[candNum - 1]) {
				table2Data[i][2] = "1000";
			} else {
				table2Data[i][2] = "500";
			}
			table2Data[i][3] = "Buy";
		}
	}

	public void setScrollPane2Buy(String[] table2Names) {
		DefaultTableModel table2Model = new DefaultTableModel(table2Data,
				table2Names);
		table2 = new JTable(table2Model);
		table2.getColumn("Buy").setCellRenderer(new ButtonRenderer());
		table2.getColumn("Buy")
				.setCellEditor(new ButtonEditor(new JCheckBox()));
		Dimension d = new Dimension(5, 5);
		table2.setPreferredScrollableViewportSize(d);
		scrollPane2 = new JScrollPane(table2);
	}

	public void addInfo(int candidate, int lowerBound, int upperBound) {
		String info = lowerBound + " - " + upperBound;
		candInfo[candidate] = info;
		// FIXME Find a better way to do this?
		for (int i = 0; i < table1.getRowCount(); i++) {
			int number = (Integer) table1.getModel().getValueAt(i, 0) - 1;
			if (number == candidate) {
				table1.getModel().setValueAt(info, i, 2);
				contentPane.revalidate();
				contentPane.repaint();
			}
		}
	}

	public void addTable2Vote() {
		table2Names = new String[] { "CandNum", "Party", "Vote" };
		table2Data = new Object[candNums.length][3];
		for (int i = 0; i < candNums.length; i++) {
			table2Data[i][0] = candNums[i];
			table2Data[i][1] = candParties[i];
			table2Data[i][2] = "Vote";
		}
		Dimension d = new Dimension(5, 5);
		DefaultTableModel table2Model = new DefaultTableModel(table2Data,
				table2Names);
		table2 = new JTable(table2Model);
		table2.getColumn("Vote").setCellRenderer(new ButtonRenderer());
		table2.getColumn("Vote").setCellEditor(
				new ButtonEditor(new JCheckBox()));
		table2.setPreferredScrollableViewportSize(d);
		scrollPane2 = new JScrollPane(table2);
		contentPane.add(scrollPane2, "cell 1 4 4 1,grow");

		contentPane.revalidate();
		contentPane.repaint();
	}

	public void startStrawVote() {
		table1Names = new String[] { "Cand Num", "Party", "Info" };
		table1Data = new Object[candNums.length][3];
		for (int i = 0; i < candNums.length; i++) {
			table1Data[i][0] = candNums[i];
			table1Data[i][1] = candParties[i];
			table1Data[i][2] = candInfo[i];
		}

		DefaultTableModel table1Model = new DefaultTableModel(table1Data,
				table1Names);
		table1 = new JTable(table1Model);
		Dimension d = new Dimension(5, 5);
		table1.setPreferredScrollableViewportSize(d);
		scrollPane1 = new JScrollPane(table1);
		contentPane.add(scrollPane1, "cell 1 3 4 1,grow");

		contentPane.revalidate();
		contentPane.repaint();
	}

	public void updateVotes(int[][] votes, boolean isVoteRound) {
		for (int i = 0; i < votes.length; i++) {
			if (!isVoteRound) {
				candVotes1[votes[i][0] - 1] = votes[i][1];
			} else {
				candVotes[votes[i][0] - 1] = votes[i][1];
			}
		}
		if (!isVoteRound) {
			table1Names = new String[] { "Cand Num", "Party", "Info",
					"Straw Votes", "First Round Votes" };
			table1Data = new Object[votes.length][5];
		} else {
			table1Names = new String[] { "Cand Num", "Party", "Info",
					"Straw Votes" };
			table1Data = new Object[votes.length][4];
		}
		table2Names = new String[] { "CandNum", "Party", "Vote" };
		table2Data = new Object[votes.length][3];
		for (int i = 0; i < votes.length; i++) {
			int arrayIndex = votes[i][0] - 1;
			table1Data[i][0] = candNums[arrayIndex];
			table1Data[i][1] = candParties[arrayIndex];
			table1Data[i][2] = candInfo[arrayIndex];
			if (!isVoteRound) {
				table1Data[i][3] = candVotes[arrayIndex];
				table1Data[i][4] = candVotes1[arrayIndex];
			} else {
				table1Data[i][3] = candVotes[arrayIndex];
			}

			table2Data[i][0] = candNums[arrayIndex];
			table2Data[i][1] = candParties[arrayIndex];
			table2Data[i][2] = "Vote";
		}

		DefaultTableModel table1Model = new DefaultTableModel(table1Data,
				table1Names);
		table1 = new JTable(table1Model);
		Dimension d = new Dimension(5, 5);
		table1.setPreferredScrollableViewportSize(d);
		scrollPane1 = new JScrollPane(table1);
		contentPane.add(scrollPane1, "cell 1 3 4 1,grow");

		DefaultTableModel table2Model = new DefaultTableModel(table2Data,
				table2Names);
		table2 = new JTable(table2Model);
		table2.getColumn("Vote").setCellRenderer(new ButtonRenderer());
		table2.getColumn("Vote").setCellEditor(
				new ButtonEditor(new JCheckBox()));
		table2.setPreferredScrollableViewportSize(d);
		scrollPane2 = new JScrollPane(table2);
		if (isVoteRound) {
			contentPane.add(scrollPane2, "cell 1 4 4 1,grow");
		}

		contentPane.revalidate();
		contentPane.repaint();
	}

	class ButtonRenderer extends JButton implements TableCellRenderer {

		public ButtonRenderer() {
			setOpaque(true);
		}

		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row,
				int column) {
			if (isSelected) {
				setForeground(table.getSelectionForeground());
				setBackground(table.getSelectionBackground());
			} else {
				setForeground(table.getForeground());
				setBackground(UIManager.getColor("Button.background"));
			}
			setText((value == null) ? "" : value.toString());
			return this;
		}
	}

	/**
	 * @version 1.0 11/09/98
	 */
	class ButtonEditor extends DefaultCellEditor {
		protected JButton button;

		private String label;

		private boolean isPushed;

		public ButtonEditor(JCheckBox checkBox) {
			super(checkBox);
			button = new JButton();
			button.setOpaque(true);
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					if (label == "Buy") {
						fireBuy();
					} else if (label == "Vote") {
						fireVote();
					}
					fireEditingStopped();
				}
			});
		}

		public void fireBuy() {
			int selectedRow = table2.getSelectedRow();
			char selectedParty = (Character) table2.getModel().getValueAt(
					selectedRow, 1);
			if (party == selectedParty) {
				if (budget >= 2 * 500) {
					int selectedCand = (Integer) table2.getModel().getValueAt(
							selectedRow, 0) - 1;
					PCS.firePropertyChange("Buy Info", selectedCand, true); // Same
																			// party
					budget -= 2 * 500;
					lblBudget.setText("Budget: " + budget);
				} else {
					// Open dialog - not enough money
				}
			} else {
				if (budget >= 500) {
					int selectedCand = (Integer) table2.getModel().getValueAt(
							selectedRow, 0) - 1;
					PCS.firePropertyChange("Buy Info", selectedCand, true); // Different
																			// party
					budget -= 500;
					lblBudget.setText("Budget: " + budget);
				} else {
					// Open dialog - not enough money
				}
			}
		}

		public void fireVote() {
			isPushed = false;
			int selectedRow = table2.getSelectedRow();
			contentPane.remove(scrollPane2);
			contentPane.remove(scrollPane1);
			contentPane.revalidate();
			contentPane.repaint();
			PCS.firePropertyChange("Vote", selectedRow, null);
		}

		public Component getTableCellEditorComponent(JTable table,
				Object value, boolean isSelected, int row, int column) {
			if (isSelected) {
				button.setForeground(table.getSelectionForeground());
				button.setBackground(table.getSelectionBackground());
			} else {
				button.setForeground(table.getForeground());
				button.setBackground(table.getBackground());
			}
			label = (value == null) ? "" : value.toString();
			button.setText(label);
			isPushed = true;
			return button;
		}

		public Object getCellEditorValue() {
			EventQueue.invokeLater(new Runnable() {
				@Override
				public void run() {
					if (isPushed) {
						int selectedRow = table2.getSelectedRow();
						System.out.println("Selected row is: " + selectedRow);
						((DefaultTableModel) table2.getModel())
								.removeRow(selectedRow);
						table2.revalidate();
						table2.repaint();
						isPushed = false;
					}
				}
			});
			return new String(label);
		}

		public boolean stopCellEditing() {
			isPushed = false;
			return super.stopCellEditing();
		}

		protected void fireEditingStopped() {
			super.fireEditingStopped();
		}
	}
}
